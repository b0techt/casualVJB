
/*
  PLEASE DO NOT EDIT THIS FILE
  CODE WILL BREAK
  THANK YOU
  endpoint = https://www.jsonstore.io/da0777d8b9076d164acf3f9924eef303dadde0be6845e1e1177ae09a643e1dac

  THIS IS A MAKE SHIFT DATABASE, A DIRECTORY IS CREATED TO STORE FILES ACCORDING TO THE USER UNIQUE NAMES

  FILE IS STORED AS A TEXT FILE, WHEN REPL.IT HAVE CONFIGURED A JSON DATABASES I WILL CHANGE THE CONNECTION 

  IN THE MEAN WHILE DO TELL ME WHAT YOU WOULD LIKE TO ADDED TO THE CODE TO MAKE IT MORE FUNCTIONAL
  */
import java.io.*;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.concurrent.*;
import java.util.*;

@SuppressWarnings("unused")

public class StoreConnect {

	static void store_data(String idName, String fname, String sname) {
		try {
			String path = idName + ".txt";
			File f = new File(path);
			f.createNewFile();
			FileWriter bw = new FileWriter(path);
			bw.write("First name: " + fname + "\r\nSurname: " + sname);
			bw.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	static void store_data(String idName, int age, int account_number) {
		try {
			String path = idName + ".txt";
			File f = new File(path);
			f.createNewFile();
			FileWriter bw = new FileWriter(path, true);
			bw.write("\r\nAge: " + age + "\r\nAccount Number: " + account_number);
			bw.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	static void store_data(String idName, String card_number, int pin_number, int sec_number) {
		try {
			String path = idName + ".txt";
			File f = new File(path);
			f.createNewFile();
			FileWriter bw = new FileWriter(path, true);
			bw.write("\r\nCard Number: " + card_number + "\r\nPIN Number: " + pin_number + "\r\nSecurity Number: "
					+ sec_number);
			bw.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	static void balance_updates(String idName, String newBalance) {
		try {
			String path = null;
			if (Main.login) {
				idName = Main.logName;
				path = "Balance-" + idName + ".txt";
			} else {
				idName = Main.creator.idname();
				path = "Balance-" + idName + ".txt";
			}

			File bFile = new File(path);
			FileWriter fw = new FileWriter(bFile);
			fw.write(newBalance);
			fw.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	static double current_balanceNlog(String idName) {
		double accBalance = 0;
		try {
			String path = null;

			if (Main.login) {
				idName = Main.logName;
				path = "Balance-" + idName + ".txt";
			} else {
				idName = Main.creator.idname();
				path = "Balance-" + idName + ".txt";
			}

			File cFile = new File(path);
			Scanner read = new Scanner(cFile);
			while (read.hasNext()) {
				accBalance = read.nextDouble();
			}
			read.close();
			return accBalance;
		} catch (Exception e) {
			return 0;
		}
	}

	static void editFile(int lineOp, String newInfo) {
		String path = null;
		String newDetails = null;
		String tempLine = null;
		if (Main.login) {
			path = Main.logName + ".txt";
		} else {
			path = Main.creator.idname() + ".txt";
		}

		try {
			BufferedReader br = new BufferedReader(new FileReader(path));
			StringBuffer sb = new StringBuffer();

			String lines;
			while ((lines = br.readLine()) != null) {
				sb.append(lines + "\n");
			}
			tempLine = sb.toString();
			br.close();

			LineNumberReader lnr = new LineNumberReader(new FileReader(path));
			lnr.setLineNumber(lineOp);
			switch (lnr.getLineNumber()) {
			case 1:
				String oldName = Files.readAllLines(Paths.get(path)).get(lineOp - 1);
				newDetails = "First name: " + newInfo;
				tempLine = tempLine.replaceAll(oldName, newDetails);
				lnr.close();

				FileWriter fwn = new FileWriter(path);
				fwn.write(tempLine);
				fwn.close();
				break;
			case 2:
				String oldLast = Files.readAllLines(Paths.get(path)).get(lineOp - 1);
				newDetails = "Surname: " + newInfo;
				tempLine = tempLine.replaceAll(oldLast, newDetails);
				lnr.close();

				FileWriter fws = new FileWriter(path);
				fws.write(tempLine);
				fws.close();
				break;
			case 3:
				String oldAge = Files.readAllLines(Paths.get(path)).get(lineOp - 1);
				newDetails = "Age: " + newInfo;
				tempLine = tempLine.replaceAll(oldAge, newDetails);
				lnr.close();

				FileWriter fwa = new FileWriter(path);
				fwa.write(tempLine);
				fwa.close();
				break;
			}
		} catch (IOException e) {
			System.out.print("Error occured in System redirecting to main menu.");

			try {
				System.out.println("...");
				TimeUnit.SECONDS.sleep(2);
				System.out.println("...");
				TimeUnit.SECONDS.sleep(2);
				System.out.println("...");
				TimeUnit.SECONDS.sleep(2);
				MainMenu.main_menu();

			} catch (InterruptedException ide) {
				MainMenu.main_menu();
			}

		}

	}
}
